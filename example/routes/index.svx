Tiny Robots is a frontend build system and anti-framework built on top of [Svelte](https://svelte.dev/blog/svelte-3-rethinking-reactivity#What_is_Svelte) designed help you ship ambitious web apps faster.

### Features üåà

- Fast dev mode, fast build step, fast runtime.
- A minimal surface area - less code you have to remember.
- üî• Ultrafast hot module replacement¬π. üî• Seriously, we're talking really frickin' fast. Tiny Robots uses [Snowpack](https://www.snowpack.dev/) in development mode, so hot-swapping completes in the order of milliseconds and stays that way no matter how large your app gets.
- Configurable universal data fetching. Routes can be loaded eagerly or wait until their data is loaded.
- Static site generation with dynamic data loading. Just run `yarn run tr export`.
- Client side routing with automatic data fetching.
- Filesystem-based routing, with directory-based layouts and global app layout.
- Global CSS/JS support for stuff like vendor code or analytics. Just create a `global` directory and all of it's contents will get inlined into every page.
- Markdown in your Svelte with [mdsvex](https://mdsvex.com/).

¬πWhat's hot module replacement? Here's the definition [straight from Snowpack](https://www.snowpack.dev/concepts/hot-module-replacement):

> _Hot Module Replacement (HMR) is the ability to push file updates to the browser without triggering a full page refresh. Imagine changing some CSS [or JavaScript, or a Svelte file], hitting save, and then instantly seeing your change reflected on the page without a refresh. That‚Äôs HMR._

### Project goals ü§ñ

Tiny Robots embraces [Svelte's philosophy](https://svelte.dev/blog/write-less-code), and attempts to explore what applying those principles up the stack could look like. It borrows a lot of ideas from [Next.js](https://nextjs.org/) and [Sapper](https://sapper.svelte.dev/), but tries to keep a minimal footprint.

Tiny Robots aims to:

- Get out of your way.
- Empower code authors with an instantaneous feedback loop.
- Do the grunt work and write the boring code for you.
- Be predictable, and easy to debug when it's not.
- Generate extremely fast, performant bundles.
- Invest in [ES modules](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/) and the future of web technologies.

_Check out the code for this site [here](https://github.com/mkshio/tiny-robots/tree/master/example)._

> **Author's note:** üèóÔ∏è This project is a week old. It has bugs. It has random console-logs. It has no respect for SemVer (_not yet, sorry!_). It will have random breaking changes. It will have some bad ideas in it. But this project is ambitious, so please be kind and help where you can. Thanks!

---

### 1. Setup üì¶

```shell
# a simple setup
yarn add tiny-robots # or npm install tiny-robots
mkdir routes && touch routes/index.svelte # your first route

# create special directories
yarn run tr init
# --- or ---
mkdir static # optional - static assets (images, fonts) go here
touch index.html # optional - an HTML shell
mkdir global # optional - global css/j"s files go here; they'll automatically be inlined
```

### 2. Develop üë©üèΩ‚Äçüíª

```shell
yarn run tr
```

Runs your app with [Snowpack](https://www.snowpack.dev/).

### 3. Ship üöÄ

```shell
yarn run tr export
```

Generates an `./export` directory containing production-ready static HTML pages and JS bundles using [Rollup](https://rollupjs.org/guide/en/).

Adding `--dev` will produce a build for diagnostics. Presently, it generates an un-minified bundle, but more features may be added under this flag in the future.

---

### Moving parts

#### Routes

Tiny Robots rocks PHP-style filesystem-based routing. Just create a file in the `routes` directory and navigate to it in your browser, and Tiny Robots will render the file for you.

Some examples of URL-to-file resolution:

- `/` ‚Üí `/routes/index.svelte`
- `/page` ‚Üí `/routes/page.svelte`
- `/subpath/` ‚Üí `/routes/subpath/index.svelte`
- `/subpath/page` ‚Üí `/routes/subpath/page.svelte`

#### Layouts with `_layout.svelte`

You may optionally create a `_layout.svelte` to act as a wrapper component around every file in that directory.

For example, if you create a file at the path `/routes/mypath/myfile.svelte`, Tiny Robots will search for a file `/routes/mypath/_layout.svelte` to act as a layout for that page.

Layouts must render a default `<slot />` (a [Svelte concept](https://svelte.dev/tutorial/slots)) as a render target for the current page.

#### App layout with `_app.svelte`

You may additionally create a file in the root of your `routes` directory named `_app.svelte`, which will in turn wrap every page (including that pages layout).

Like their layout cousins, app layouts must also render a default `<slot />`.

#### Data fetching with `prefetch` and `clientFetch`

Route components may optionally export module-level functions named `prefetch` and `clientFetch`. Both functions are used to call external resources and provide props for the route when it is rendered. Both functions are expected to return objects with key-value pairs corresponding to the props of the component in question.

While they share similar interfaces, they serve different purposes.

`prefetch` is useful for getting data for static rendering. It only runs once, in Node.js at _build time_. Because of this, it lacks access to query parameters or any other pieces request context.

`clientFetch` is useful for fetching dynamic data when the page is being viewed. It runs in the browser when the page is navigated, including the initial page load. Components may optionally export a module-level flag to mark itself as "eager" (`export const eager = true;`). When navigating to an eager component on the client, the router will immediately render the page, then update it once the prefetch resolves.

Tiny Robots also injects a prop named `fetching` into every component (including `_layout` and `_app` components) to indicate the app is waiting on the current route's `clientFetch` call, allowing the UI to respond to interstitial states.

```html
<script context="module">
  // ran at build time on your hardware
  export async function prefetch() {
    // fetch from your API and
    // return a promise of the component's props
    return Promise.resolve({ prefetchedProp: 0 });
  }

  // ran on navigation in the browser
  export async function clientFetch({
    params, // object, client-side only - the query parameters from the current url
  }) {
    // fetch from your API and
    // return a promise of the component's props
    return Promise.resolve({ clientFetchProp: 1 });
  }

  export const eager = true;
</script>

<script>
  // fetch state: managed by tiny robots
  export let fetching = false;
  // derived from prefetch above
  export let prefetchedProp;
  // derived from clientFetch above
  export let clientFetchProp;
</script>
```

#### Static assets

If you depend on any images, fonts, stylesheets or other files stash them in a directory in your project's root called `static`. Tiny Robots will copy the contents of `static` into it's generated export directory.

#### Global assets

Sometimes we inherit code that, for one reason or another, can't or shouldn't be bundled:

- Non-modularized assets
- Vendor libraries
- Analytics
- Polyfills
- CSS resets or global themes
- jQuery or Wordpress plugins (hey, no judgement here)
- Code hastily copy/pasted from Stack Overflow üòÖ

Tiny Robots will detect the presence of a `global` directory in your project root, and automatically inline all of the code from each file in said directory into every HTML page created during export.

Presently, it only supports plain JavaScript and CSS.

Note: unlike static assets, global assets aren't available in the `export` directory.

---

### WIP/Roadmap üèó

#### Pending

- Cleanup.
  - View source.
    - Use proper, a11y modal.
    - Use tab layout instead of linear.
    - Link to Github.
    - Syntax highlighting.
- `prefetch` context - functions available during prefetch.
- Add universal global `fetch`.
- SEO defaults.
  - Use svelte-seo.
  - Meta tags.
  - Social cards.
- Better CSS transformation and extraction with postcss.
- Route asset preloads on page transition.
  - Scan for hrefs to other pages and preload their js/css/pages.
  - Image preloads.
    - Add images to manifest.
- Error pages.
  - Error reporting.
  - Error boundaries.
  - SPA error handling.
  - Sourcemaps
    - Generate, upload, (optionally) destroy for prod.
- Config file.

#### Coming soon

- Routing fixes.
  - Error handling.
  - Ignore fetch when on same route.
  - Client-side subroutes.
- Dynamic routes e.g. `/dir/[slug]`.
  - "Get static routes" capability.
  - Client-only routes.
- Plain 'ol JS routes.
- View source syntax highlighting.
- Metapages: pages that operate on other page data (i.e. index pages, RSS feeds).
- npx/yarn `create-*-app` command
- Generators for Netlify/Vercel/etc.
  - "Deploy on X" buttons.
  - Generate manifests for catchall routes and URL rewrites.
  - Abstraction for lambdas.
- svelte-preprocess support.
- PWA/service worker.
- Sitemaps.
- SSR mode.
  - Vercel runtime integration.
  - Server hooks.

#### Ideas & fun stuff

- More HTML features.
  - Partials.
  - Merge head/body with template/layouts.
- Work with Svelte/Snowpack teams to reduce console noise.
- Error recovery in dev.
- Per-component rehydration opt-out (i.e. server-only components).
- View source: show dependencies too?
- Experiment: Support for React pages.
- Experiment: esbuild for production.
