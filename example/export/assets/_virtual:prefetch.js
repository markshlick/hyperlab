import {S as SvelteComponent,i as init,s as safe_not_equal,e as element,t as text,j as space,c as claim_element,a as children,b as claim_text,d as detach,k as claim_space,o as attr,f as insert,g as append,n as noop,p as set_data,R as Route,A as App}from'./_app-b77cb0b6.js';import {L as Layout}from'./_layout-2317779f.js';/* routes/prefetch.svelte generated by Svelte v3.32.2 */

function create_else_block(ctx) {
	let t0;
	let t1;

	return {
		c() {
			t0 = text("wasPrefetched: ");
			t1 = text(/*wasPrefetched*/ ctx[0]);
		},
		l(nodes) {
			t0 = claim_text(nodes, "wasPrefetched: ");
			t1 = claim_text(nodes, /*wasPrefetched*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*wasPrefetched*/ 1) set_data(t1, /*wasPrefetched*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (17:4) {#if fetching}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("(fetching...)");
		},
		l(nodes) {
			t = claim_text(nodes, "(fetching...)");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let h3;
	let t0;
	let t1;
	let p;
	let em;
	let t2;
	let a;
	let t3;

	function select_block_type(ctx, dirty) {
		if (/*fetching*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			h3 = element("h3");
			t0 = text("prefetch");
			t1 = space();
			p = element("p");
			em = element("em");
			if_block.c();
			t2 = space();
			a = element("a");
			t3 = text("index");
			this.h();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "prefetch");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			em = claim_element(p_nodes, "EM", {});
			var em_nodes = children(em);
			if_block.l(em_nodes);
			em_nodes.forEach(detach);
			p_nodes.forEach(detach);
			t2 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t3 = claim_text(a_nodes, "index");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, em);
			if_block.m(em, null);
			insert(target, t2, anchor);
			insert(target, a, anchor);
			append(a, t3);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(em, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if_block.d();
			if (detaching) detach(t2);
			if (detaching) detach(a);
		}
	};
}

async function prefetch() {
	return new Promise(n => setTimeout(() => n({ wasPrefetched: true }), 1000));
}

function instance($$self, $$props, $$invalidate) {
	let { wasPrefetched } = $$props;
	let { fetching } = $$props;

	$$self.$$set = $$props => {
		if ("wasPrefetched" in $$props) $$invalidate(0, wasPrefetched = $$props.wasPrefetched);
		if ("fetching" in $$props) $$invalidate(1, fetching = $$props.fetching);
	};

	return [wasPrefetched, fetching];
}

class Prefetch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { wasPrefetched: 0, fetching: 1 });
	}
}var prefetch$1=/*#__PURE__*/Object.freeze({__proto__:null,'default': Prefetch,prefetch: prefetch});// @start: generated by hyperlab

const start = ({ pageProps, hydrate }) => {
  const root = new Route({
    target: document.body,
    hydrate,
    props: {
      ...routeProps(),
      pageProps
    }
  });

  import('./app-8478ed84.js').then(m => m.start({ root, dev: false }));
};

const routeProps = () => ({
  appLayoutComponent: App,
  layoutComponent: Layout,
  pageComponent: Prefetch,
});

// @end
export{prefetch$1 as page,routeProps,start};